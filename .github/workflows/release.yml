name: Release Automation

on:
  push:
    branches:
      - main

jobs:
  release:
    # Skip workflow if commit message contains [skip ci]
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.REPO_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Generate release notes
        id: generate_release_notes
        run: |
          git fetch --tags
          
          if git describe --tags --abbrev=0 > /dev/null 2>&1; then
            LATEST_TAG=$(git describe --tags --abbrev=0)
            GIT_LOG=$(git log $LATEST_TAG..HEAD --pretty=format:"- %h %s by %an on %ad" --date=short)
          else
            GIT_LOG=$(git log --pretty=format:"- %h %s by %an on %ad" --date=short)
          fi
      
          if [ -z "$GIT_LOG" ]; then
            GIT_LOG="- No new commits since last release."
          fi
      
          FEATURES=$(echo "$GIT_LOG" | grep -i "feat\|feature" || echo "- None")
          FIXES=$(echo "$GIT_LOG" | grep -i "fix\|bugfix" || echo "- None")
          IMPROVEMENTS=$(echo "$GIT_LOG" | grep -i "chore\|refactor\|perf\|improve" || echo "- None")
      
          CONTRIBUTORS=$(git log --format='%an' $LATEST_TAG..HEAD | sort | uniq)
          if [ -z "$CONTRIBUTORS" ]; then
            CONTRIBUTORS="- None"
          fi
      
          # Create RELEASE_NOTES file
          cat <<EOF > RELEASE_NOTES.md
          ### ðŸš€ Release Details
      
          **Version:** $GITHUB_REF_NAME
      
          **Date:** $(date +'%Y-%m-%d')
      
          ### ðŸ”¹ Features
          $FEATURES
      
          ### ðŸ›  Bug Fixes
          $FIXES
      
          ### âš¡ Improvements
          $IMPROVEMENTS
      
          ### ðŸ‘¥ Contributors
          $CONTRIBUTORS
          EOF
      
          # Save environment variables properly
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          cat RELEASE_NOTES.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
          echo "CONTRIBUTORS<<EOF" >> $GITHUB_ENV
          echo "$CONTRIBUTORS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      

      - name: Update README
        run: |
          cat <<EOF > README.md
          # ðŸ“¦ Project Name

          A short description of the app goes here.

          ## ðŸ“– Table of Contents
          - [ðŸ“¦ Project Name](#-project-name)
          - [ðŸš€ Latest Release](#-latest-release)
          - [ðŸ”§ Setup](#-setup)
          - [ðŸ›  Features](#-features)
          - [ðŸ“œ Changelog](#-changelog)
          - [ðŸ‘¥ Contributors](#-contributors)

          ## ðŸš€ Latest Release
          **Version:** ${GITHUB_REF_NAME}  
          **Date:** $(date +'%Y-%m-%d')

          ## ðŸ“œ Changelog
          ${NOTES}

          ## ðŸ‘¥ Contributors
          ${CONTRIBUTORS}

          EOF
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
          NOTES: ${{ env.NOTES }}
          CONTRIBUTORS: ${{ env.CONTRIBUTORS }}

      - name: Commit updated README
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add README.md
          git commit -m "Update README for release ${GITHUB_REF_NAME} [skip ci]"
          git push https://${{ secrets.REPO_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main

      - name: Generate Tag
        id: generate_tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)

          if [[ -z "$LATEST_TAG" ]]; then
            NEW_TAG="v1.0.0"
          else
            if [[ "$LATEST_TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              MAJOR="${BASH_REMATCH[1]}"
              MINOR="${BASH_REMATCH[2]}"
              PATCH="${BASH_REMATCH[3]}"
              PATCH=$((PATCH + 1))
              NEW_TAG="v$MAJOR.$MINOR.$PATCH"
            else
              echo "Error: Latest tag '$LATEST_TAG' is not in expected format (vX.Y.Z)."
              exit 1
            fi
          fi

          echo "New Tag: $NEW_TAG"
          git tag $NEW_TAG
          git push https://${{ secrets.REPO_TOKEN }}@github.com/${{ github.repository }}.git $NEW_TAG

          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
            GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        with:
            tag_name: ${{ env.NEW_TAG }}  
            release_name: Release ${{ env.NEW_TAG }}
            body: ${{ env.RELEASE_NOTES }}
            draft: false
            prerelease: false

    # - name: Notify Slack
    #   uses: slackapi/slack-github-action@v1
    #   with:
    #     slack-message: "ðŸš€ New Release: ${{ env.NEW_TAG }} has been published!\n\nRelease Notes:\n${{ env.NOTES }}"
    #   env:
    #
