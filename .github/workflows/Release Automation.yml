name: Release Automation

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0

      - name: Set up git config
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Clean untracked files
        run: |
          git clean -fd
          git reset --hard HEAD

      - name: Fetch PR Details
        id: pr_details
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          
          PR_DESCRIPTION=$(echo "${{ github.event.pull_request.body }}" | sed 's/^[[:space:]]*//' | sed '/^$/d')
          if [ -z "$PR_DESCRIPTION" ]; then
            PR_DESCRIPTION="No description provided"
          fi
          
          PR_COMMENTS=$(gh pr view $PR_NUMBER --json comments --template '{{range .comments}}{{.body}}{{"\n---\n"}}{{end}}')
          
          {
            echo "### 📝 PR Description"
            echo "$PR_DESCRIPTION"
            echo ""
            echo "### 💬 PR Comments"
            echo "$PR_COMMENTS"
          } > PR_RELEASE_NOTES.md

          echo "$PR_DESCRIPTION" > PR_DESCRIPTION.txt
          echo "$PR_COMMENTS" > PR_COMMENTS.txt

      - name: Generate release notes
        run: |
          git fetch --tags

          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$LATEST_TAG" ]; then
            GIT_LOG=$(git log $LATEST_TAG..HEAD --pretty=format:"- %h %s by %an on %ad" --date=short)
          else
            GIT_LOG=$(git log --pretty=format:"- %h %s by %an on %ad" --date=short)
          fi

          if [ -z "$GIT_LOG" ]; then
            GIT_LOG="- No new commits since last release."
          fi

          FEATURES=$(echo "$GIT_LOG" | grep -i "feat\|feature" || echo "- None")
          FIXES=$(echo "$GIT_LOG" | grep -i "fix\|bugfix" || echo "- None")
          IMPROVEMENTS=$(echo "$GIT_LOG" | grep -i "chore\|refactor\|perf\|improve" || echo "- None")

          CONTRIBUTORS=$(git log --format='%an' $LATEST_TAG..HEAD | sort | uniq)
          if [ -z "$CONTRIBUTORS" ]; then
            CONTRIBUTORS="- None"
          fi

          PR_DESCRIPTION=$(cat PR_DESCRIPTION.txt)
          PR_COMMENTS=$(cat PR_COMMENTS.txt)

          cat <<EOF > RELEASE_NOTES.md
          ### 🚀 Release Details

          **Version:** $GITHUB_REF_NAME  
          **Date:** $(date +'%Y-%m-%d')

          ### 🔹 Features
          $FEATURES

          ### 🛠 Bug Fixes
          $FIXES

          ### ⚡ Improvements
          $IMPROVEMENTS

          ### 📝 PR Details
          $PR_DESCRIPTION

          ### 💬 PR Comments
          $PR_COMMENTS

          ### 👥 Contributors
          $CONTRIBUTORS
          EOF

      - name: Update README
        run: |
          awk '/## 📜 Changelog/{exit} {print}' README.MD > README_NEW.md || touch README_NEW.md
          echo "## 📜 Changelog" >> README_NEW.md
          cat RELEASE_NOTES.md >> README_NEW.md
          mv README_NEW.md README.MD

      - name: Commit and push changes
        run: |
          git add RELEASE_NOTES.md README.MD
          git commit -m "Update release notes [skip ci]" || echo "No changes to commit"
          git push https://${{ secrets.REPO_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main

      - name: Generate and push tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)

          if [[ -z "$LATEST_TAG" ]]; then
            NEW_TAG="v1.0.0"
          else
            if [[ "$LATEST_TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              MAJOR="${BASH_REMATCH[1]}"
              MINOR="${BASH_REMATCH[2]}"
              PATCH="${BASH_REMATCH[3]}"
              PATCH=$((PATCH + 1))
              NEW_TAG="v$MAJOR.$MINOR.$PATCH"
            else
              echo "Error: Latest tag '$LATEST_TAG' is not in expected format (vX.Y.Z)."
              exit 1
            fi
          fi

          # Export NEW_TAG to environment
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

          git tag $NEW_TAG
          git push https://${{ secrets.REPO_TOKEN }}@github.com/${{ github.repository }}.git $NEW_TAG

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}
          release_name: Release ${{ env.NEW_TAG }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false